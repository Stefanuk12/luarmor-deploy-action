/**
 * Executes fetch operation and handles response.
 * @param {string|URL} url
 * @param {Object} options
 * @param {RequestReporter} options.reporter
 * @param {Object} [options.cache]
 * @param {number} [options.maxRetries]
 * @param {string} [options.method]
 * @param {Object} [options.headers]
 * @param {string} [options.body]
 * @param {Function} options.postprocess
 * @param {Object} options.stateActions
 * @return {Promise<Response>} from fetch
 */
export function stateActionHandler(url: string | URL, options: {
    reporter: RequestReporter;
    cache?: any;
    maxRetries?: number;
    method?: string;
    headers?: any;
    body?: string;
    postprocess: Function;
    stateActions: any;
}): Promise<Response>;
/**
 * Waits and retries after rate limit reset time has reached.
 * @see https://auth0.com/docs/policies/rate-limit-policy
 * @see https://developer.github.com/v3/#rate-limiting
 * @see https://opensource.zalando.com/restful-api-guidelines/#153
 * @param {Response} response from fetch
 * @param {Object} options
 * @param {number} nthTry
 * @returns {HandlerResult}
 */
export function rateLimitHandler(response: Response, options: any, nthTry: number): HandlerResult;
/**
 * Try several times with a increasing delay.
 * @param {Response} response from fetch
 * @param {Object} options
 * @param {number} nthTry
 * @returns {HandlerResult}
 */
export function retryHandler(response: Response, options: any, nthTry: number): HandlerResult;
export function slowRetryHandler(response: any, options: any, nthTry: any): {
    done: boolean;
    response: any;
    postprocess: boolean;
    repeatAfter: number;
    message: string;
} | {
    done: boolean;
    response: any;
    postprocess: boolean;
    repeatAfter?: undefined;
    message?: undefined;
};
/**
 * Redirect to given header location.
 * @param {Response} response from fetch
 * @param {Object} options
 * @param {number} nthTry
 * @returns {HandlerResult}
 */
export function redirectHandler(response: Response, options: any, nthTry: number): HandlerResult;
/**
 * Postprocessing if response is ok.
 * @param {Response} response from fetch
 * @param {Object} options
 * @param {number} nthTry
 * @returns {HandlerResult}
 */
export function defaultHandler(response: Response, options: any, nthTry: number): HandlerResult;
/**
 * No postprocessing.
 * @param {Response} response from fetch
 * @param {Object} options
 * @param {number} nthTry
 * @returns {HandlerResult}
 */
export function errorHandler(response: Response, options: any, nthTry: number): HandlerResult;
/**
 * Provide cached data.
 * @param {Response} response from fetch
 * @param {Object} options
 * @param {number} nthTry
 * @returns {Promise<HandlerResult>}
 */
export function cacheHandler(response: Response, options: any, nthTry: number): Promise<HandlerResult>;
/**
 * Minimum wait time in msecs.
 */
export const DEFAULT_MIN_WAIT_MSECS: 2000;
/**
 * Max # of retries.
 */
export const DEFAULT_MAX_RETRIES: 4;
export const defaultStateActions: {
    "-1": typeof retryHandler;
    0: typeof retryHandler;
    301: typeof redirectHandler;
    302: typeof redirectHandler;
    303: typeof redirectHandler;
    304: typeof cacheHandler;
    307: typeof redirectHandler;
    308: typeof redirectHandler;
    400: typeof errorHandler;
    403: typeof rateLimitHandler;
    408: typeof retryHandler;
    409: typeof retryHandler;
    412: typeof errorHandler;
    413: typeof errorHandler;
    420: typeof retryHandler;
    423: typeof retryHandler;
    425: typeof retryHandler;
    429: typeof rateLimitHandler;
    430: typeof retryHandler;
    444: typeof retryHandler;
    500: typeof retryHandler;
    502: typeof retryHandler;
    503: typeof retryHandler;
    504: typeof retryHandler;
    507: typeof errorHandler;
    509: typeof retryHandler;
    529: typeof retryHandler;
    598: typeof retryHandler;
    599: typeof retryHandler;
    ERR_STREAM_PREMATURE_CLOSE: typeof retryHandler;
    UND_ERR_CONNECT_TIMEOUT: typeof retryHandler;
    UND_ERR_SOCKET: typeof slowRetryHandler;
    ECONNRESET: typeof slowRetryHandler;
    EAI_AGAIN: typeof retryHandler;
};
export type HandlerResult = {
    /**
     * what to fetch next
     */
    url?: string;
    /**
     * of milliseconds to wait befor next try
     */
    repeatAfter?: number;
    /**
     * to report
     */
    message?: string;
    /**
     * op is finished return
     */
    done: boolean;
    response: Response;
    /**
     * exec postprocess
     */
    postprocess: boolean;
};
/**
 * Function to provide progress report.
 */
export type RequestReporter = Function;
